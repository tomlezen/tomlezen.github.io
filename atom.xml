<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Tomlezen的博客</title>
  
  <subtitle>My code runs fine</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://tomlezen.com/"/>
  <updated>2019-01-18T13:15:13.538Z</updated>
  <id>http://tomlezen.com/</id>
  
  <author>
    <name>Tomlezen</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>TeamCity部署Android持续化集成</title>
    <link href="http://tomlezen.com/2019/01/18/teamcity-deploy-android/"/>
    <id>http://tomlezen.com/2019/01/18/teamcity-deploy-android/</id>
    <published>2019-01-18T02:10:30.000Z</published>
    <updated>2019-01-18T13:15:13.538Z</updated>
    
    <content type="html"><![CDATA[<p>公司持续集成用的是<code>Jenkins</code>，<code>TeamCity</code>是自己私下玩玩，感觉挺不错的，就是资料教程啥的比较少<br>安装过程比较简单，这里略过，<a href="https://confluence.jetbrains.com/display/TCD18/TeamCity+Documentation" target="_blank" rel="noopener">官方文档</a></p><h2 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h2><ol><li><p>进入<code>Administration</code> </p><img src="/2019/01/18/teamcity-deploy-android/img-1.png"></li><li><p>点击<code>CreateProject</code>，填写代码仓库地址，如果有账户密码填入即可，然后点击<code>Proceed</code></p><img src="/2019/01/18/teamcity-deploy-android/img-2.png"></li><li><p>填写项目名和构建配置名称，构建配置名称默认是<code>Build</code>，可根据自己需求更改，我这里改成了<code>Pack</code>，然后点击<code>Proceed</code></p><img src="/2019/01/18/teamcity-deploy-android/img-3.png"></li></ol><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><ol><li><p>等待创建完成，勾选Gradle编译步骤，点击<code>Use selected</code></p><img src="/2019/01/18/teamcity-deploy-android/img-4.png"></li><li><p>一般需求是编译release包，所以修改下gradle任务，点击<code>edit</code></p><img src="/2019/01/18/teamcity-deploy-android/img-5.png"></li><li><p>将<code>build</code>改为<code>assembleRelease</code>，这里可根据自己工程配置buildType自行修改，<strong>Gradle Wrapper</strong>也可根据自己的需求选择对应配置的版本</p><img src="/2019/01/18/teamcity-deploy-android/img-6.png"></li><li><p><strong>JDK</strong>也可以根据需求配置不同版本</p></li><li><p>保存</p></li><li><p>配置apk输出路径，选择左侧功能列表<code>General Setting</code>，路径规则是<code>源码路径 =&gt; 输出路径</code>，一般情况下设置成<code>app\build\outputs\apk =&gt; outputs</code>就可以了，别忘了保存</p><img src="/2019/01/18/teamcity-deploy-android/img-9.png"></li><li><p>配置<code>ANROID_HOME</code>环境变量，打开<br><code>TeamCity/buildAgent/conf/buildAgent.properties</code>文件，在末尾加载android sdk的路径：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">env.ANDROID_HOME=你的sdk路径</span><br></pre></td></tr></table></figure></li></ol><h2 id="可选配置"><a href="#可选配置" class="headerlink" title="可选配置"></a>可选配置</h2><h3 id="修改git配置"><a href="#修改git配置" class="headerlink" title="修改git配置"></a>修改git配置</h3><ol><li><p>选择左侧功能列表<code>Version Control Setting</code>，点击<code>Edit</code></p><img src="/2019/01/18/teamcity-deploy-android/img-7.png"></li></ol><h3 id="修改触发规则"><a href="#修改触发规则" class="headerlink" title="修改触发规则"></a>修改触发规则</h3><ol><li><p>选择左侧功能列表<code>Triggers</code>，可以自己添加触发规则</p></li><li><p>如果不想自动触发，可以将规则关闭或者删除</p><img src="/2019/01/18/teamcity-deploy-android/img-8.png"></li></ol><h3 id="自定义参数"><a href="#自定义参数" class="headerlink" title="自定义参数"></a>自定义参数</h3><ol><li><p>选择左侧功能列表<code>Parameters</code>，添加自己需求的参数即可</p><img src="/2019/01/18/teamcity-deploy-android/img-12.png"></li></ol><h2 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h2><ol><li><p>点击<code>Run</code>开启一个编译任务</p><img src="/2019/01/18/teamcity-deploy-android/img-10.png"></li><li><p>生成的apk文件在<code>Artifacts</code>下</p><img src="/2019/01/18/teamcity-deploy-android/img-11.png"></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;公司持续集成用的是&lt;code&gt;Jenkins&lt;/code&gt;，&lt;code&gt;TeamCity&lt;/code&gt;是自己私下玩玩，感觉挺不错的，就是资料教程啥的比较少&lt;br&gt;安装过程比较简单，这里略过，&lt;a href=&quot;https://confluence.jetbrains.com/
      
    
    </summary>
    
      <category term="技术" scheme="http://tomlezen.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="教程" scheme="http://tomlezen.com/categories/%E6%8A%80%E6%9C%AF/%E6%95%99%E7%A8%8B/"/>
    
    
      <category term="Android" scheme="http://tomlezen.com/tags/Android/"/>
    
      <category term="TeamCity" scheme="http://tomlezen.com/tags/TeamCity/"/>
    
      <category term="持续集成" scheme="http://tomlezen.com/tags/%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90/"/>
    
  </entry>
  
  <entry>
    <title>在vps服务器上搭建Shadowsocks服务器</title>
    <link href="http://tomlezen.com/2018/05/05/build-shadowsocks/"/>
    <id>http://tomlezen.com/2018/05/05/build-shadowsocks/</id>
    <published>2018-05-05T12:23:46.000Z</published>
    <updated>2018-09-13T12:44:44.302Z</updated>
    
    <content type="html"><![CDATA[<p>搭建shadowsocks服务器之前得还需要一台vps服务器，这里就不介绍vps服务器购买方式，网上已有蛮多的教程并且每个商家的购买方式也不一。</p><h2 id="安装环境"><a href="#安装环境" class="headerlink" title="安装环境"></a>安装环境</h2><p>安装epel扩展源和更新：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">yum -y install epel-release</span><br><span class="line">yum update</span><br></pre></td></tr></table></figure></p><p>安装pip:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum -y install python-pip</span><br></pre></td></tr></table></figure></p><p>查看pip是否安装成功:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip -V</span><br></pre></td></tr></table></figure></p><img src="/2018/05/05/build-shadowsocks/img-1.jpg"><h2 id="安装Shadowsocks和配置"><a href="#安装Shadowsocks和配置" class="headerlink" title="安装Shadowsocks和配置"></a>安装Shadowsocks和配置</h2><p>通过pip安装shadowsocks：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install shadowsocks</span><br></pre></td></tr></table></figure></p><p>编辑配置文件:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi /etc/shadowsocks.json</span><br></pre></td></tr></table></figure></p><p>进入编辑模式并复制以下内容：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">        &quot;server&quot;: &quot;服务器的ip地址&quot;,</span><br><span class="line">        &quot;local_address&quot;: &quot;127.0.0.1&quot;,</span><br><span class="line">        &quot;local_port&quot;:1080,</span><br><span class="line">        &quot;port_password&quot;: &#123;</span><br><span class="line">            &quot;8381&quot;: &quot;tomlezen1&quot;,</span><br><span class="line">            &quot;8382&quot;: &quot;tomlezen2&quot;,</span><br><span class="line">            &quot;8383&quot;: &quot;tomlezen3&quot;,</span><br><span class="line">            &quot;8384&quot;: &quot;tomlezen4&quot;</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;timeout&quot;:300,</span><br><span class="line">        &quot;method&quot;:&quot;aes-256-cfb&quot;,</span><br><span class="line">        &quot;fast_open&quot;: false</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><ul><li>server: vps服务器地址 </li><li>port_password: 配置多个账号和密码</li><li>method：加密方式<br>如果不需要配置多账号：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">        &quot;server&quot;: &quot;服务器的ip地址&quot;,</span><br><span class="line">        &quot;server_port&quot;: &quot;8381&quot;,</span><br><span class="line">        &quot;local_address&quot;: &quot;127.0.0.1&quot;,</span><br><span class="line">        &quot;local_port&quot;:1080,</span><br><span class="line">        &quot;password&quot;: &quot;password&quot;,</span><br><span class="line">        &quot;timeout&quot;:300,</span><br><span class="line">        &quot;method&quot;:&quot;aes-256-cfb&quot;,</span><br><span class="line">        &quot;fast_open&quot;: false</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>启动Shadowsocks:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssserver -c /etc/shadowsocks.json -d start</span><br></pre></td></tr></table></figure></p><p>这样就可以通过Shadowsocks客户端访问啦<br><img src="/2018/05/05/build-shadowsocks/img-2.jpg"><br><img src="/2018/05/05/build-shadowsocks/img-3.jpg"></p><h2 id="安装配置Supervisor"><a href="#安装配置Supervisor" class="headerlink" title="安装配置Supervisor"></a>安装配置Supervisor</h2><p>Supervisor是一个进程管理工具，可以很方便的监听、启动、停止、重启一个或多个进程<br>安装:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install supervisor</span><br></pre></td></tr></table></figure></p><p>copy一份配置文件到etc目录:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo_supervisord_conf &gt; /etc/supervisord.conf</span><br></pre></td></tr></table></figure></p><p>打开配置文件:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi /etc/supervisord.conf</span><br></pre></td></tr></table></figure></p><p>进入编辑模式，在末尾添加上一下内容:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[program:shadowsocks]</span><br><span class="line">command=ssserver -c /etc/shadowsocks.json -d start</span><br><span class="line">autostart=true</span><br><span class="line">user=root</span><br><span class="line">direct_stde=true</span><br></pre></td></tr></table></figure></p><p>启动supervisor服务：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">supervisord</span><br></pre></td></tr></table></figure></p><p>这样就算完成啦，更多<code>supervisor</code>使用请参考<a href="http://supervisord.org/" target="_blank" rel="noopener">官方文档</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;搭建shadowsocks服务器之前得还需要一台vps服务器，这里就不介绍vps服务器购买方式，网上已有蛮多的教程并且每个商家的购买方式也不一。&lt;/p&gt;
&lt;h2 id=&quot;安装环境&quot;&gt;&lt;a href=&quot;#安装环境&quot; class=&quot;headerlink&quot; title=&quot;安装环境
      
    
    </summary>
    
      <category term="教程" scheme="http://tomlezen.com/categories/%E6%95%99%E7%A8%8B/"/>
    
    
      <category term="Shadowsocks" scheme="http://tomlezen.com/tags/Shadowsocks/"/>
    
  </entry>
  
  <entry>
    <title>Gradle插件实现jenkins构建apk时自动进行360加固</title>
    <link href="http://tomlezen.com/2018/04/12/dev-360-jiagu-gradle-plugin/"/>
    <id>http://tomlezen.com/2018/04/12/dev-360-jiagu-gradle-plugin/</id>
    <published>2018-04-12T01:39:57.000Z</published>
    <updated>2018-05-05T11:26:59.330Z</updated>
    
    <content type="html"><![CDATA[<h2 id="360加固助手下载"><a href="#360加固助手下载" class="headerlink" title="360加固助手下载"></a>360加固助手下载</h2><p>到<a href="http://jiagu.360.cn/" target="_blank" rel="noopener">360加固宝</a>下载对应系统的助手，<strong>Linux版本下载需要关注其公众号</strong>，我之前没看文档而用Mac版本的代替折腾了很久；<br>解压助手并将目录下的<code>jiagu</code>文件夹复制到对应Jenkins服务器上，具体放在什么位置你自己决定，只要能正常访问就行；<br><img src="/2018/04/12/dev-360-jiagu-gradle-plugin/img_1.png"></p><h2 id="Jenkins环境变量配置"><a href="#Jenkins环境变量配置" class="headerlink" title="Jenkins环境变量配置"></a>Jenkins环境变量配置</h2><p>​    <strong><em>环境变量名可根据自己的需要而定</em></strong><br>配置360加固文件夹路径，即上一步将<code>jiagu</code>文件夹放置的路径：<br><img src="/2018/04/12/dev-360-jiagu-gradle-plugin/img_2.png"><br>配置360用户名和密码：<br><img src="/2018/04/12/dev-360-jiagu-gradle-plugin/img_3.png"><br>配置AndroidSDK路径，因为我们需要使用<code>Build Tools</code>里面的工具对加固后的apk进行对齐和签名操作：<br><img src="/2018/04/12/dev-360-jiagu-gradle-plugin/img_4.png"></p><h2 id="Gradle插件开发"><a href="#Gradle插件开发" class="headerlink" title="Gradle插件开发"></a>Gradle插件开发</h2><h3 id="项目创建"><a href="#项目创建" class="headerlink" title="项目创建"></a>项目创建</h3><p>新建Android工程<code>360JiaGuPlugin</code>（也可直接创建java工程，但Android工程方便调试开发）;<br>新建<code>Java Library</code>模块<code>plugin</code>;<br><img src="/2018/04/12/dev-360-jiagu-gradle-plugin/img_5.png"></p><h3 id="配置相关依赖"><a href="#配置相关依赖" class="headerlink" title="配置相关依赖"></a>配置相关依赖</h3><p>在<code>plugin</code>的<code>build.gradle</code>文件新增以下依赖：<br><figure class="highlight plain"><figcaption><span>build.gradle</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">dependencies &#123;</span><br><span class="line">    implementation gradleApi()</span><br><span class="line">    implementation &quot;com.android.tools.build:gradle:3.1.0&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="创建加固任务"><a href="#创建加固任务" class="headerlink" title="创建加固任务"></a>创建加固任务</h3><p>新建<code>JiaGuPlugin</code>类并继承<code>DefaultTask</code>，完整代码如下:<br><figure class="highlight plain"><figcaption><span>JiaGuPlugin.kt Koltin:language</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><span class="line">package com.tlz.jiaguplugin</span><br><span class="line"></span><br><span class="line">import com.android.build.gradle.AppExtension</span><br><span class="line">import org.gradle.api.DefaultTask</span><br><span class="line">import org.gradle.api.tasks.TaskAction</span><br><span class="line">import java.io.BufferedReader</span><br><span class="line">import java.io.File</span><br><span class="line">import java.io.InputStreamReader</span><br><span class="line"></span><br><span class="line">class JiaGuTask : DefaultTask() &#123;</span><br><span class="line"></span><br><span class="line">  /** shell文件名. */</span><br><span class="line">  private val shellFileName = &quot;jiagu_360.sh&quot;</span><br><span class="line"></span><br><span class="line">  @TaskAction</span><br><span class="line">  fun run() &#123;</span><br><span class="line">    val shellFile = project.file(shellFileName)</span><br><span class="line">    // 先删除之前创建的shell文件.</span><br><span class="line">    if (shellFile.exists()) &#123;</span><br><span class="line">      shellFile.delete()</span><br><span class="line">    &#125;</span><br><span class="line">    shellFile.createNewFile()</span><br><span class="line">    // 获取release apk文件路径.</span><br><span class="line">    (project.extensions.getByName(&quot;android&quot;) as? AppExtension)?.apply &#123;</span><br><span class="line">      applicationVariants.firstOrNull &#123; it.buildType.name == &quot;release&quot; &#125;</span><br><span class="line">          ?.apply &#123;</span><br><span class="line">            outputs.firstOrNull()</span><br><span class="line">                ?.apply &#123;</span><br><span class="line">                  // android sdk 路径</span><br><span class="line">                  val androidHome = System.getenv(&quot;ANDROID_HOME&quot;)</span><br><span class="line">                  // 获取最新版本的build-tool路径</span><br><span class="line">                  val buildToolPath = File(&quot;$androidHome/build-tools&quot;).listFiles().last().absolutePath</span><br><span class="line">                  // 签名工具文件路径</span><br><span class="line">                  val signerJarPath = &quot;$buildToolPath/apksigner&quot;</span><br><span class="line">                  // 对齐工具文件路径</span><br><span class="line">                  val zipalignJarPath = &quot;$buildToolPath/zipalign&quot;</span><br><span class="line">                  // 加固jar文件路径</span><br><span class="line">                  val jiaguJarPath = &quot;$&#123;System.getenv(&quot;360JIAGU_PATH&quot;)&#125;/jiagu.jar&quot;</span><br><span class="line">                  // 360加固用户名</span><br><span class="line">                  val user = System.getenv(&quot;360JIAGU_USER&quot;)</span><br><span class="line">                  // 360加固用户密码</span><br><span class="line">                  val password = System.getenv(&quot;360JIAGU_PWD&quot;)</span><br><span class="line">                  // 获取签名文件路径及密码</span><br><span class="line">                  val keyPath = signingConfig.storeFile.absolutePath</span><br><span class="line">                  val keyPass = signingConfig.storePassword</span><br><span class="line">                  val apkPath = outputFile.absolutePath</span><br><span class="line">                  // release apk文件名</span><br><span class="line">                  val apkFileName = outputFile.nameWithoutExtension</span><br><span class="line">                  // 加固输出文件夹</span><br><span class="line">                  val outApkPath = outputFile.parentFile.absolutePath</span><br><span class="line">                  // 加固后的文件</span><br><span class="line">                  val jiaguFilePath = &quot;$outApkPath/$&#123;apkFileName&#125;_$&#123;versionName.replace(&quot;.&quot;, &quot;&quot;)&#125;_jiagu.apk&quot;</span><br><span class="line">                  // apk对齐后的输出文件</span><br><span class="line">                  val zipOutPath = &quot;$outApkPath/$&#123;apkFileName&#125;_aligned.apk&quot;</span><br><span class="line">    </span><br><span class="line">                  // 构建shell文件的内容</span><br><span class="line">                  val shCode = StringBuilder()</span><br><span class="line">                  shCode.append(&quot;#!/bin/bash\n\n&quot;)</span><br><span class="line">                  // 登陆加固账户</span><br><span class="line">                  shCode.append(&quot;java -jar $jiaguJarPath -login $user $password\n&quot;)</span><br><span class="line">                  // 执行加固</span><br><span class="line">                  shCode.append(&quot;java -jar $jiaguJarPath -jiagu $apkPath $outApkPath\n&quot;)</span><br><span class="line">                  // 对apk 进行对齐操作</span><br><span class="line">                  shCode.append(&quot;echo \&quot;------ zipalign start ------\&quot;\n&quot;)</span><br><span class="line">                  shCode.append(&quot;$signerJarPath -v 4 $jiaguFilePath $zipOutPath\n&quot;)</span><br><span class="line">                  shCode.append(&quot;echo \&quot;------ zipalign finish ------\&quot;\n&quot;)</span><br><span class="line">                  // 对apk进行签名</span><br><span class="line">                  shCode.append(&quot;echo \&quot;------ sign start ------\&quot;\n&quot;)</span><br><span class="line">                  shCode.append(&quot;$zipalignJarPath sign --ks $keyPath $zipOutPath &lt;&lt;EOF\n&quot; +</span><br><span class="line">                      &quot;$keyPass\n&quot; +</span><br><span class="line">                      &quot;EOF&quot;)</span><br><span class="line">                  shCode.append(&quot;echo \&quot;------ sign finish ------\&quot;\n&quot;)</span><br><span class="line">                  shellFile.writeText(shCode.toString())</span><br><span class="line">                  // 执行shell文件</span><br><span class="line">                  val pro = Runtime.getRuntime().exec(&quot;sh $&#123;shellFile.absolutePath&#125; &gt;&gt; logfile&quot;)</span><br><span class="line">                  pro.waitFor()</span><br><span class="line">                  // 读取并输出结果</span><br><span class="line">                  val read = BufferedReader(InputStreamReader(pro.inputStream))</span><br><span class="line">                  var line: String? = read.readLine()</span><br><span class="line">                  while (line != null) &#123;</span><br><span class="line">                    println(line)</span><br><span class="line">                    line = read.readLine()</span><br><span class="line">                  &#125;</span><br><span class="line">                  // 删除加固文件</span><br><span class="line">                  File(jiaguFilePath).delete()</span><br><span class="line">                  // 重命名已签名的文件</span><br><span class="line">                  if (File(zipOutPath).renameTo(File(&quot;$outApkPath/$&#123;apkFileName&#125;_signed.apk&quot;))) &#123;</span><br><span class="line">                    println(&quot;重命名文件成功&quot;)</span><br><span class="line">                  &#125;</span><br><span class="line">                &#125;</span><br><span class="line">          &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><em>如果需要多渠道打包，请参考360加固的命令行说明，对以上处理代码做出相应调整即可</em></p><h3 id="创建插件并初始化任务"><a href="#创建插件并初始化任务" class="headerlink" title="创建插件并初始化任务"></a>创建插件并初始化任务</h3><p>在插件中创建加固任务并在<code>assembleRelease</code>任务结束时执行加固任务，完整代码如下：<br><figure class="highlight plain"><figcaption><span>JiaGuPlugin.kt Kotlin:language</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">package com.tlz.jiaguplugin</span><br><span class="line"></span><br><span class="line">import org.gradle.api.Plugin</span><br><span class="line">import org.gradle.api.internal.project.ProjectInternal</span><br><span class="line">import javax.inject.Inject</span><br><span class="line"></span><br><span class="line">open class JiaGuPlugin @Inject constructor() : Plugin&lt;ProjectInternal&gt; &#123;</span><br><span class="line"></span><br><span class="line">  override fun apply(project: ProjectInternal?) &#123;</span><br><span class="line">    project?.let &#123;</span><br><span class="line">      it.afterEvaluate &#123;</span><br><span class="line">        if (check360JiaguEnv()) &#123;</span><br><span class="line">          // 创建任务</span><br><span class="line">          it.tasks.create(&quot;jiagu_360&quot;, JiaGuTask::class.java)</span><br><span class="line">          // 在assembleRelease任务结束后执行jiagu_360任务</span><br><span class="line">          it.tasks.findByPath(&quot;assembleRelease&quot;)?.apply &#123; finalizedBy(&quot;jiagu_360&quot;) &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  /**</span><br><span class="line">   * 检查360加固环境变量是否存在.</span><br><span class="line">   * @return Boolean</span><br><span class="line">      */</span><br><span class="line">    private fun check360JiaguEnv(): Boolean &#123;</span><br><span class="line">    // 360加固文件路径</span><br><span class="line">    val path = System.getenv(&quot;360JIAGU_PATH&quot;)</span><br><span class="line">    // 360加固用户名</span><br><span class="line">    val user = System.getenv(&quot;360JIAGU_USER&quot;)</span><br><span class="line">    // 360加固账户密码</span><br><span class="line">    val password = System.getenv(&quot;360JIAGU_PWD&quot;)</span><br><span class="line">    return path?.isNotEmpty() == true &amp;&amp; user?.isNotEmpty() == true &amp;&amp; password?.isNotEmpty() == true</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="配置插件"><a href="#配置插件" class="headerlink" title="配置插件"></a>配置插件</h3><p>Gradle插件开发步骤及配置这里就不再叙述，网上有很多教程。<br><img src="/2018/04/12/dev-360-jiagu-gradle-plugin/img_6.png"></p><h3 id="在本地发布插件"><a href="#在本地发布插件" class="headerlink" title="在本地发布插件"></a>在本地发布插件</h3><p>在<code>build.gradle</code>文件应用<code>maven</code>插件，并配置<code>uploadArchives</code>任务，完整<code>build.gradle</code>文件如下:<br><figure class="highlight plain"><figcaption><span>build.gradle</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">apply plugin: &apos;java-library&apos;</span><br><span class="line">apply plugin: &apos;kotlin&apos;</span><br><span class="line">apply plugin: &apos;maven&apos;</span><br><span class="line"></span><br><span class="line">group &apos;com.tlz.jiaguplugin&apos;</span><br><span class="line">// 发布版本号</span><br><span class="line">version &apos;1.0.0&apos;</span><br><span class="line"></span><br><span class="line">dependencies &#123;</span><br><span class="line">    implementation fileTree(dir: &apos;libs&apos;, include: [&apos;*.jar&apos;])</span><br><span class="line">    implementation&quot;org.jetbrains.kotlin:kotlin-stdlib-jre7:$kotlin_version&quot;</span><br><span class="line">    implementation gradleApi()</span><br><span class="line">    implementation &quot;com.android.tools.build:gradle:3.1.0&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">sourceCompatibility = &quot;1.7&quot;</span><br><span class="line">targetCompatibility = &quot;1.7&quot;</span><br><span class="line"></span><br><span class="line">uploadArchives&#123;</span><br><span class="line">    repositories &#123;</span><br><span class="line">        mavenDeployer &#123;</span><br><span class="line">            repository(url: uri(&apos;./repo&apos;))</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>在<code>Terminal</code>输入命令<code>gradlew uploadArchives</code>发布，完成后<code>plugin</code>文件下会有一个名为<code>repo</code>的文件夹，里面就是刚才发布的插件。<br><img src="/2018/04/12/dev-360-jiagu-gradle-plugin/img_7.png"></p><h3 id="应用插件并测试"><a href="#应用插件并测试" class="headerlink" title="应用插件并测试"></a>应用插件并测试</h3><p>在工程下的<code>build.gradle</code>里依赖刚才发布的插件：<br><img src="/2018/04/12/dev-360-jiagu-gradle-plugin/img_8.png"><br>在<code>app</code>的<code>build.gradle</code>里应用插件<code>apply plugin: &#39;com.tlz.jiaguplugin&#39;</code>，插件名为<code>.properties</code>的文件名。<br>在Jenkins上集成该项目，自动构建结束在<code>app.build.outputs.apk.release</code>下的<code>.xxx_signed.apk</code>为加固并签名成功的文件。</p><h3 id="结束"><a href="#结束" class="headerlink" title="结束"></a>结束</h3><p>到此就结束了，测试成功后最好将插件发布到公司内部或远程仓库，方便项目依赖使用<br><br>[参考文章]: <a href="https://blog.csdn.net/likuan0214/article/details/75090103" target="_blank" rel="noopener">https://blog.csdn.net/likuan0214/article/details/75090103</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;360加固助手下载&quot;&gt;&lt;a href=&quot;#360加固助手下载&quot; class=&quot;headerlink&quot; title=&quot;360加固助手下载&quot;&gt;&lt;/a&gt;360加固助手下载&lt;/h2&gt;&lt;p&gt;到&lt;a href=&quot;http://jiagu.360.cn/&quot; target=&quot;_b
      
    
    </summary>
    
      <category term="教程" scheme="http://tomlezen.com/categories/%E6%95%99%E7%A8%8B/"/>
    
    
      <category term="Android" scheme="http://tomlezen.com/tags/Android/"/>
    
      <category term="Kotlin" scheme="http://tomlezen.com/tags/Kotlin/"/>
    
      <category term="Gradle" scheme="http://tomlezen.com/tags/Gradle/"/>
    
  </entry>
  
  <entry>
    <title>修改BottomSheetDialogFragment背景</title>
    <link href="http://tomlezen.com/2018/03/30/setting-bottomsheetdialogfragment-background/"/>
    <id>http://tomlezen.com/2018/03/30/setting-bottomsheetdialogfragment-background/</id>
    <published>2018-03-30T09:45:06.000Z</published>
    <updated>2018-05-05T11:26:59.335Z</updated>
    
    <content type="html"><![CDATA[<p><code>BottomSheetDialogFragment</code>是Design支持库里的组件，在日常开发中也经常用到。有时候会遇到一些特殊的需求，如：修改BottomSheetDialogFragment的默认背景，然而组件并没有提供直接修改背景的API。怎么办，我也很绝望啊！</p><h3 id="从源码中找线索"><a href="#从源码中找线索" class="headerlink" title="从源码中找线索"></a>从源码中找线索</h3><p>在<code>BottomSheetDialog</code>源码的<code>getThemeResId</code>方法中可以看到默认的主题为<code>R.style.Theme_Design_Light_BottomSheetDialog</code>，似乎感觉到了点希望：<br><figure class="highlight plain"><figcaption><span>BottomSheetDialog.java</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">private static int getThemeResId(Context context, int themeId) &#123;</span><br><span class="line">        if (themeId == 0) &#123;</span><br><span class="line">            // If the provided theme is 0, then retrieve the dialogTheme from our theme</span><br><span class="line">            TypedValue outValue = new TypedValue();</span><br><span class="line">            if (context.getTheme().resolveAttribute(</span><br><span class="line">                    R.attr.bottomSheetDialogTheme, outValue, true)) &#123;</span><br><span class="line">                themeId = outValue.resourceId;</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                // bottomSheetDialogTheme is not provided; we default to our light theme</span><br><span class="line">                themeId = R.style.Theme_Design_Light_BottomSheetDialog;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return themeId;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>进入<code>R.style.Theme_Design_Light_BottomSheetDialog</code>源码文件：<br><figure class="highlight plain"><figcaption><span>values.xml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;style name=&quot;Theme.Design.Light.BottomSheetDialog&quot; parent=&quot;Theme.AppCompat.Light.Dialog&quot;&gt;</span><br><span class="line">        &lt;item name=&quot;android:windowBackground&quot;&gt;@android:color/transparent&lt;/item&gt;</span><br><span class="line">        &lt;item name=&quot;android:windowAnimationStyle&quot;&gt;@style/Animation.Design.BottomSheetDialog&lt;/item&gt;</span><br><span class="line">        &lt;item name=&quot;bottomSheetStyle&quot;&gt;@style/Widget.Design.BottomSheet.Modal&lt;/item&gt;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><br>可以看到一个名为<code>bottomSheetStyle</code>的属性，其值为<code>@style/Widget.Design.BottomSheet.Modal</code>，瞬间感觉希望大大的了，再进入其源码：<br><figure class="highlight plain"><figcaption><span>values.xml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;style name=&quot;Widget.Design.BottomSheet.Modal&quot; parent=&quot;android:Widget&quot;&gt;</span><br><span class="line">        &lt;item name=&quot;android:background&quot;&gt;?android:attr/colorBackground&lt;/item&gt;</span><br><span class="line">        &lt;item name=&quot;android:elevation&quot; ns1:ignore=&quot;NewApi&quot;&gt;@dimen/design_bottom_sheet_modal_elevation&lt;/item&gt;</span><br><span class="line">        &lt;item name=&quot;behavior_peekHeight&quot;&gt;auto&lt;/item&gt;</span><br><span class="line">        &lt;item name=&quot;behavior_hideable&quot;&gt;true&lt;/item&gt;</span><br><span class="line">        &lt;item name=&quot;behavior_skipCollapsed&quot;&gt;false&lt;/item&gt;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><br><code>android:background</code>，哈哈，背景，不多说赶紧试试！</p><h3 id="测试验证"><a href="#测试验证" class="headerlink" title="测试验证"></a>测试验证</h3><p>在<code>styles.xml</code>中添加一个继承于<code>Widget.Design.BottomSheet.Modal</code>的style<code>CustomBottomSheetStyle</code>，重写<code>android:background</code>，我这里设置的背景为透明：<br><figure class="highlight plain"><figcaption><span>styles.xml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;style name=&quot;CustomBottomSheetStyle&quot; parent=&quot;Widget.Design.BottomSheet.Modal&quot;&gt;</span><br><span class="line">        &lt;item name=&quot;android:background&quot;&gt;@android:color/transparent&lt;/item&gt;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><br>再添加一个继承于<code>Theme.Design.Light.BottomSheetDialog</code>的style<code>CustomBottomSheetDialogTheme</code>，重写<code>bottomSheetStyle</code>属性：<br><figure class="highlight plain"><figcaption><span>styles.xml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;style name=&quot;CustomBottomSheetDialogTheme&quot; parent=&quot;Theme.Design.Light.BottomSheetDialog&quot;&gt;</span><br><span class="line">        &lt;item name=&quot;bottomSheetStyle&quot;&gt;@style/CustomBottomSheetStyle&lt;/item&gt;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><br>再在<code>CustomBottomSheetDialogFragment</code>中重写<code>getTheme</code>方法：<br><figure class="highlight plain"><figcaption><span>CustomBottomSheetDialogFragment.kt</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">override fun getTheme(): Int = R.style.CustomBottomSheetDialogTheme</span><br></pre></td></tr></table></figure><br>运行查看效果：<br><img src="/2018/03/30/setting-bottomsheetdialogfragment-background/img_1.png"><br>Nice good !</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;code&gt;BottomSheetDialogFragment&lt;/code&gt;是Design支持库里的组件，在日常开发中也经常用到。有时候会遇到一些特殊的需求，如：修改BottomSheetDialogFragment的默认背景，然而组件并没有提供直接修改背景的API。怎么办
      
    
    </summary>
    
      <category term="技术" scheme="http://tomlezen.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="Android" scheme="http://tomlezen.com/categories/%E6%8A%80%E6%9C%AF/Android/"/>
    
    
      <category term="Android" scheme="http://tomlezen.com/tags/Android/"/>
    
      <category term="Kotlin" scheme="http://tomlezen.com/tags/Kotlin/"/>
    
  </entry>
  
  <entry>
    <title>Windows上运行Kotlin Native第一个程序：Hello World</title>
    <link href="http://tomlezen.com/2018/03/28/kotlin-native-hello-world/"/>
    <id>http://tomlezen.com/2018/03/28/kotlin-native-hello-world/</id>
    <published>2018-03-28T02:42:12.000Z</published>
    <updated>2018-04-05T02:44:23.990Z</updated>
    
    <content type="html"><![CDATA[<h2 id="编译Kotlin-Native源码"><a href="#编译Kotlin-Native源码" class="headerlink" title="编译Kotlin Native源码"></a>编译Kotlin Native源码</h2><h3 id="克隆源码"><a href="#克隆源码" class="headerlink" title="克隆源码"></a>克隆源码</h3><p>如果不想编译源码，也可以直接下载官方编译好的：<a href="https://github.com/JetBrains/kotlin-native/releases" target="_blank" rel="noopener">下载地址</a><br>克隆<a href="https://github.com/JetBrains/kotlin-native" target="_blank" rel="noopener">github</a>上的源码：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git <span class="built_in">clone</span> https://github.com/JetBrains/kotlin-native.git</span><br></pre></td></tr></table></figure></p><h3 id="编译源码"><a href="#编译源码" class="headerlink" title="编译源码"></a>编译源码</h3><p>进入源码文件夹：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> kotlin-native</span><br></pre></td></tr></table></figure></p><p>更新下载依赖：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ gradlew dependencies:update</span><br></pre></td></tr></table></figure></p><p>执行编译：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ gradlew dist</span><br></pre></td></tr></table></figure></p><p>编译完后会在源码目录生成一个<code>dist</code>文件夹，Kotlin Native编译器在<code>dist/bin</code>下。这里我将<code>dist</code>整个文件夹拷贝到G盘的KotlinNative文件夹下（此步骤不是必须的，我这样做主要方便以后使用。</p><h2 id="创建Hello-World"><a href="#创建Hello-World" class="headerlink" title="创建Hello World"></a>创建Hello World</h2><h3 id="创建工程并配置"><a href="#创建工程并配置" class="headerlink" title="创建工程并配置"></a>创建工程并配置</h3><p>打开IDEA新建一个名为<code>KotlinNativeHelloWorld</code>的工程:<br><img src="/2018/03/28/kotlin-native-hello-world/img-1.png"><br><img src="/2018/03/28/kotlin-native-hello-world/img-2.png"><br>创建<code>HelloWorld.kt</code>文件并写上打印<code>Hello World！</code>的main方法:<br><figure class="highlight plain"><figcaption><span>HelloWorld.kt</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">fun main(args: Array&lt;String&gt;) &#123;</span><br><span class="line">  println(&quot;Hello World！&quot;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>在<code>build.gradle</code>文件增加以下配置:<br><figure class="highlight plain"><figcaption><span>Kotlin Native插件依赖</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">dependencies &#123;</span><br><span class="line">...</span><br><span class="line">    classpath &quot;org.jetbrains.kotlin:kotlin-native-gradle-plugin:+&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><figure class="highlight plain"><figcaption><span>插件仓库地址</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">repositories &#123;</span><br><span class="line">        ...</span><br><span class="line">        maven &#123;</span><br><span class="line">            url &quot;https://dl.bintray.com/jetbrains/kotlin-native-dependencies&quot;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><figure class="highlight plain"><figcaption><span>应用插件</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apply plugin: &apos;konan&apos;</span><br></pre></td></tr></table></figure><br><figure class="highlight plain"><figcaption><span>告诉konan需要编译的程序，可以配置多个</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">konanArtifacts &#123;</span><br><span class="line">    program(&apos;HelloWorld&apos;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>在<code>gradle.properties</code>（如果没有该文件，自己创建一个即可）配置konan编译器路径。因为我之前将编译好的拷贝到了G盘下，所以这里的路径是G盘下的，如果你之前没有拷贝，请采用源码下对应的路径：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">konan.home=G:/KotlinNative/dist</span><br></pre></td></tr></table></figure></p><h3 id="编译运行"><a href="#编译运行" class="headerlink" title="编译运行"></a>编译运行</h3><p>配置完后在<code>Terminal</code>里输入<code>gradlew compileKonan</code>命令进行编译：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ gradlew compileKonan</span><br></pre></td></tr></table></figure></p><p>完后，在<code>build/konan/bin/mingw_x64</code>下会又一个名为<code>HelloWorld.exe</code>的文件，然后运行这个exe文件：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> build/konan/bin/mingw_x64</span><br><span class="line">$ HelloWorld.exe</span><br></pre></td></tr></table></figure></p><p>可以看到输出了<code>Hello World！</code>文字，这样就算成功啦！<br><img src="/2018/03/28/kotlin-native-hello-world/img-3.png"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;编译Kotlin-Native源码&quot;&gt;&lt;a href=&quot;#编译Kotlin-Native源码&quot; class=&quot;headerlink&quot; title=&quot;编译Kotlin Native源码&quot;&gt;&lt;/a&gt;编译Kotlin Native源码&lt;/h2&gt;&lt;h3 id=&quot;克隆源码&quot;
      
    
    </summary>
    
      <category term="技术" scheme="http://tomlezen.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="Kotlin-Native" scheme="http://tomlezen.com/categories/%E6%8A%80%E6%9C%AF/Kotlin-Native/"/>
    
    
      <category term="Kotlin Native" scheme="http://tomlezen.com/tags/Kotlin-Native/"/>
    
  </entry>
  
  <entry>
    <title>有感</title>
    <link href="http://tomlezen.com/2018/03/26/create-personal-blog-experience/"/>
    <id>http://tomlezen.com/2018/03/26/create-personal-blog-experience/</id>
    <published>2018-03-26T14:18:54.000Z</published>
    <updated>2018-03-28T11:55:31.684Z</updated>
    
    <content type="html"><![CDATA[<p>2018年3月26日晚，个人博客终于搭建完成，内心还是蛮激动的。由于自己技术比较菜，捣腾了好久才完成，踩了不少坑，走了不少弯路，光Github Pages绑定域名都弄了一下午。不过在这过程中，自己又学会了不少的技能，不亏不亏，哈哈！<br>希望这是一个新的开始、好的开始！！！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;2018年3月26日晚，个人博客终于搭建完成，内心还是蛮激动的。由于自己技术比较菜，捣腾了好久才完成，踩了不少坑，走了不少弯路，光Github Pages绑定域名都弄了一下午。不过在这过程中，自己又学会了不少的技能，不亏不亏，哈哈！&lt;br&gt;希望这是一个新的开始、好的开始！！
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Github Pages绑定自己的域名</title>
    <link href="http://tomlezen.com/2018/03/25/bind-domain/"/>
    <id>http://tomlezen.com/2018/03/25/bind-domain/</id>
    <published>2018-03-25T03:05:52.000Z</published>
    <updated>2018-03-28T13:41:47.294Z</updated>
    
    <content type="html"><![CDATA[<h2 id="创建CNAME文件"><a href="#创建CNAME文件" class="headerlink" title="创建CNAME文件"></a>创建CNAME文件</h2><p>进入博客网站根录，在<code>source</code>目录下新建一个名为<code>CNAME</code>的文件，不要建在<code>public</code>目录下，因为在执行<code>hexo clean</code>命令时<code>public</code>目录下的文件都会被删除；<br>打开<code>CNAME</code>文件并填写你的域名<code>xx.com</code>，<strong>一定不要写www.</strong>；<br><img src="/2018/03/25/bind-domain/img-1.png"><br>通过<code>hexo d</code>命令重新发布网站;</p><h2 id="DNS解析配置"><a href="#DNS解析配置" class="headerlink" title="DNS解析配置"></a>DNS解析配置</h2><p>我这里以GoDadyy的配置为例；<br>登陆Godaddy并进入DNS管理，现在修改名称为<code>www</code>的记录，把值修改为你的Github Pages访问地址<code>xxx.github.io</code>，以便能通过<code>www.xx.com</code>访问：<br><img src="/2018/03/25/bind-domain/img-2.png"><br>点击<code>添加</code>按钮，添加一条记录，类型选择<code>A</code>，主机填写<code>@</code>，指向填写<code>192.30.252.153</code>，选择<code>@</code>类型是为让<code>xx.com</code>能正确访问:<br><img src="/2018/03/25/bind-domain/img-3.png"><br>再次点击<code>添加</code>按钮，添加一条记录，类型选择<code>A</code>，主机填写<code>@</code>，指向填写<code>192.30.252.154</code>:<br><img src="/2018/03/25/bind-domain/img-4.png"><br>完整配置效果如下：<br><img src="/2018/03/25/bind-domain/img-5.png"><br>至此你的域名<code>xx.com</code>就能正确访问啦，有时域名解析有点慢，请耐心等待一会儿！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;创建CNAME文件&quot;&gt;&lt;a href=&quot;#创建CNAME文件&quot; class=&quot;headerlink&quot; title=&quot;创建CNAME文件&quot;&gt;&lt;/a&gt;创建CNAME文件&lt;/h2&gt;&lt;p&gt;进入博客网站根录，在&lt;code&gt;source&lt;/code&gt;目录下新建一个名为&lt;cod
      
    
    </summary>
    
      <category term="教程" scheme="http://tomlezen.com/categories/%E6%95%99%E7%A8%8B/"/>
    
    
      <category term="Github Pages" scheme="http://tomlezen.com/tags/Github-Pages/"/>
    
      <category term="Hexo" scheme="http://tomlezen.com/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>使用Github Pages、Hexo搭建个人博客</title>
    <link href="http://tomlezen.com/2018/03/24/create-personal-blog/"/>
    <id>http://tomlezen.com/2018/03/24/create-personal-blog/</id>
    <published>2018-03-24T15:54:08.000Z</published>
    <updated>2018-03-26T13:33:54.485Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://pages.github.com/" target="_blank" rel="noopener">Github Pages</a>免费给开发者托管个人网站，但是只能托管静态内容，但是对于一般的博客网站足矣。<br><a href="https://hexo.io/zh-cn/" target="_blank" rel="noopener">Hexo</a>是一个开源、简洁高效的博客框架，可以帮助开发者快速搭建自己的博客网站。</p><h2 id="基础开发环境搭建"><a href="#基础开发环境搭建" class="headerlink" title="基础开发环境搭建"></a>基础开发环境搭建</h2><h3 id="安装配置Nodejs"><a href="#安装配置Nodejs" class="headerlink" title="安装配置Nodejs"></a>安装配置<a href="http://nodejs.cn/" target="_blank" rel="noopener">Nodejs</a></h3><h3 id="安装配置Git，安装完后记得进行以下配置："><a href="#安装配置Git，安装完后记得进行以下配置：" class="headerlink" title="安装配置Git，安装完后记得进行以下配置："></a>安装配置<a href="https://git-scm.com" target="_blank" rel="noopener">Git</a>，安装完后记得进行以下配置：</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git config --global user.name <span class="string">"Your Name"</span></span><br><span class="line">$ git config --global user.email <span class="string">"email@example.com"</span></span><br></pre></td></tr></table></figure><h2 id="安装配置Hexo"><a href="#安装配置Hexo" class="headerlink" title="安装配置Hexo"></a>安装配置Hexo</h2><h3 id="安装hexo-cli"><a href="#安装hexo-cli" class="headerlink" title="安装hexo-cli"></a>安装hexo-cli</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install hexo-cli -g</span><br></pre></td></tr></table></figure><h3 id="创建博客网站"><a href="#创建博客网站" class="headerlink" title="创建博客网站"></a>创建博客网站</h3><p>初始化新建一个网站项目，<folder>即网站生成的路径，如果不设置<folder>会默认在当前目录下创建：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm init &lt;folder&gt;</span><br></pre></td></tr></table></figure></folder></folder></p><p>安装相关依赖模块：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> &lt;folder&gt; </span><br><span class="line">$ npm install</span><br></pre></td></tr></table></figure></p><p>安装完成之后，<folder>文件夹的目录如下：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">├── _config.yml</span><br><span class="line">├── package.json</span><br><span class="line">├── scaffolds</span><br><span class="line">├── <span class="built_in">source</span></span><br><span class="line">|   ├── _drafts</span><br><span class="line">|   └── _posts</span><br><span class="line">└── themes</span><br></pre></td></tr></table></figure></folder></p><h3 id="3-对网站进行相关配置"><a href="#3-对网站进行相关配置" class="headerlink" title="3. 对网站进行相关配置"></a>3. 对网站进行相关配置</h3><p>打开_config.yml文件，可进行如下修改：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">title:</span> <span class="string">你的网站标题</span></span><br><span class="line"><span class="attr">subtitle:</span> <span class="string">你的网站副标题</span></span><br><span class="line"><span class="attr">description:</span> <span class="string">你的网站描述</span></span><br><span class="line"><span class="attr">author:</span> <span class="string">你的名字</span></span><br><span class="line"><span class="attr">language:</span> <span class="string">zh-CN</span></span><br></pre></td></tr></table></figure><p>更多的详细配置请参考<a href="https://hexo.io/zh-cn/docs" target="_blank" rel="noopener">官方文档</a></p><h3 id="预览网站"><a href="#预览网站" class="headerlink" title="预览网站"></a>预览网站</h3><p>启动服务器，在浏览器中访问<code>http://localhost:4000/</code>，可以看到一篇名为Hello World的博文：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure></p><h2 id="新建博文"><a href="#新建博文" class="headerlink" title="新建博文"></a>新建博文</h2><h3 id="创建"><a href="#创建" class="headerlink" title="创建"></a>创建</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new post new-blog // <span class="string">'new-blog'</span>您可以任意指定名字</span><br><span class="line">或</span><br><span class="line">$ hexo new new-blog</span><br></pre></td></tr></table></figure><p>执行成功后在<code>source/_posts</code>文件夹下会有一个名为：<code>new-blog.md</code>的文件。<br>注意：<u>Hexo有三种默认布局：post、page和draft，使用<code>hexo new</code>时默认布局为post </u></p><h3 id="编辑"><a href="#编辑" class="headerlink" title="编辑"></a>编辑</h3><p>打开new-blog.md文件，里面的内容如下：<br><img src="/2018/03/24/create-personal-blog/img-1.png"><br>修改文章：<code>title: 新博客</code><br>添加标签，两种写法：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">tags: [学习, 练习, Blog]</span><br><span class="line">或</span><br><span class="line">tags:</span><br><span class="line">- 学习</span><br><span class="line">- 练写</span><br><span class="line">- Blog</span><br><span class="line">// 注意第二种写法的空格</span><br></pre></td></tr></table></figure></p><p>添加分类，写法与标签一样：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">categories:</span><br><span class="line">- 学习</span><br></pre></td></tr></table></figure></p><p>在<code>---</code>线下面填写博文内容：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">这是我建立的第一篇博文！</span><br></pre></td></tr></table></figure></p><p>完整内容如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: 新博客</span><br><span class="line">date: 2018-03-25 10:29:04</span><br><span class="line">tags: </span><br><span class="line">- 学习</span><br><span class="line">- 练习</span><br><span class="line">- Blog</span><br><span class="line">categories:</span><br><span class="line">- 学习</span><br><span class="line">---</span><br><span class="line">这是我新建的第一篇博文</span><br></pre></td></tr></table></figure></p><p>重新启动网站<code>hexo server</code>，效果如下（我这里使用了主题，效果可能会有所不同）：<br><img src="/2018/03/24/create-personal-blog/img-2.png"></p><h2 id="Github-Pages配置"><a href="#Github-Pages配置" class="headerlink" title="Github Pages配置"></a>Github Pages配置</h2><h3 id="Github账号、仓库创建"><a href="#Github账号、仓库创建" class="headerlink" title="Github账号、仓库创建"></a>Github账号、仓库创建</h3><p><a href="github.com">Github官网</a>：通过邮箱注册一个账号；<br>登陆Github，在主界面点击右上边的<code>New repository</code>按钮开始创建一个代码仓库；<br>在<code>Repository name</code>填写仓库名，格式必须为<code>xxx.github.io</code>，xxx即为你的Github用户名，千万别填写错误，然后点击<code>Create respository</code>按钮完成创建：<br><img src="/2018/03/24/create-personal-blog/img-3.png"></p><h3 id="添加SSH-Key"><a href="#添加SSH-Key" class="headerlink" title="添加SSH Key"></a>添加SSH Key</h3><p><a href="https://git-scm.com/book/zh/v1/%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%B8%8A%E7%9A%84-Git-%E7%94%9F%E6%88%90-SSH-%E5%85%AC%E9%92%A5" target="_blank" rel="noopener">官方文档</a><br>打开git bash，输入以下命令检查是否已存在id_rsa.pub或者id_dsa.pub，如果存在请移步<strong>复制key</strong>：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ls -al ~/.ssh</span><br></pre></td></tr></table></figure></p><p>创建ssh key：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ ssh-keygen -t rsa -b 4096 -C <span class="string">"your_email@example.com"</span></span><br><span class="line">// 别忘了换成你自己Github邮箱地址，命令执行后需要点击三次点击Enter键即可保存成功</span><br></pre></td></tr></table></figure></p><p>复制key：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mac:</span><br><span class="line">$ pbcopy &lt; ~/.ssh/id_rsa.pub</span><br><span class="line">windows:</span><br><span class="line">$ clip &lt; ~/.ssh/id_rsa.pub</span><br><span class="line">linux:</span><br><span class="line">$ sudo apt-get install xclip</span><br><span class="line">$ xclip -sel clip &lt; ~/.ssh/id_rsa.pub</span><br></pre></td></tr></table></figure></p><p>添加到Github账户，依次点击<code>Settings-&gt;SSH and GPG keys</code>，进入SSH and GPG keys管理界面，<a href="https://help.github.com/articles/adding-a-new-ssh-key-to-your-github-account/" target="_blank" rel="noopener">Github帮助文档</a>:<br><img src="/2018/03/24/create-personal-blog/img-4.png"><br><img src="/2018/03/24/create-personal-blog/img-5.png"><br>点击 <code>New SSH key</code>按钮新建key：<br><img src="/2018/03/24/create-personal-blog/img-6.png"><br>输入<code>Title</code>可随意指定，并在key输入框内粘贴之前复制的key：<br><img src="/2018/03/24/create-personal-blog/img-7.png"><br>最后点击<code>Add SSH key</code>，确认创建</p><h2 id="部署网站"><a href="#部署网站" class="headerlink" title="部署网站"></a>部署网站</h2><h3 id="配置github仓库地址"><a href="#配置github仓库地址" class="headerlink" title="配置github仓库地址"></a>配置github仓库地址</h3><p>打开网站目录下的<code>_config.yml</code>文件，进行如下修改：<br><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line"><span class="attr">  type:</span> <span class="string">git</span></span><br><span class="line"><span class="attr">  repo:</span> <span class="string">git@github.com:tomlezen/tomlezen.github.io.git</span></span><br><span class="line"><span class="attr">  branch:</span> <span class="string">master</span></span><br></pre></td></tr></table></figure></p><p><code>repo</code>参数为之前在github上创建的<code>xxx.github.io</code>仓库SSH地址，点击下图箭头所指的按钮即可快速复制：<br><img src="/2018/03/24/create-personal-blog/img-9.png"></p><h3 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo deploy</span><br></pre></td></tr></table></figure><p>等待部署完成，刷新github仓库就可以看到相关网站代码了</p><h3 id="成果"><a href="#成果" class="headerlink" title="成果"></a>成果</h3><p>在浏览器中输入<code>xxx.github.io</code>（xxx为你的Github用户名）就能访问你的博客啦。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://pages.github.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Github Pages&lt;/a&gt;免费给开发者托管个人网站，但是只能托管静态内容，但是对于一般的博客网站足矣。&lt;br&gt;&lt;a href=&quot;htt
      
    
    </summary>
    
      <category term="教程" scheme="http://tomlezen.com/categories/%E6%95%99%E7%A8%8B/"/>
    
    
      <category term="Github Pages" scheme="http://tomlezen.com/tags/Github-Pages/"/>
    
      <category term="Hexo" scheme="http://tomlezen.com/tags/Hexo/"/>
    
      <category term="博客" scheme="http://tomlezen.com/tags/%E5%8D%9A%E5%AE%A2/"/>
    
      <category term="Blog" scheme="http://tomlezen.com/tags/Blog/"/>
    
  </entry>
  
</feed>
